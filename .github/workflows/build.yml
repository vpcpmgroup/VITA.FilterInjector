name: Build VITA Filter Injector
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dev deps
        run: npm install

      - name: Build PCF
        shell: pwsh
        run: |
          $env:ESLINT_USE_FLAT_CONFIG = "false"
          npm install
          npm run build


      - name: Install PAC (robust)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          function Add-ToPath([string]$p) {
            if (Test-Path $p) { echo $p | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }
          }

          # 1) dotnet global tool
          try {
            dotnet --info
            dotnet tool install --global Microsoft.PowerApps.CLI.Tool --version 1.48.2
          } catch {
            Write-Host "dotnet tool install failed: $($_.Exception.Message)"
          }
          Add-ToPath "$env:USERPROFILE\.dotnet\tools"
          $pacCmd = (Get-Command pac.exe -ErrorAction SilentlyContinue).Path

          # 2) MSI fallback if not found
          if (-not $pacCmd) {
            Write-Host "PAC not found after dotnet tool. Trying MSIâ€¦"
            $msi = "$env:RUNNER_TEMP\PowerAppsCLI.msi"
            Invoke-WebRequest -Uri "https://aka.ms/PowerAppsCLI" -OutFile $msi
            Start-Process msiexec.exe -Wait -ArgumentList "/i `"$msi`" /qn /norestart"
            $cands = @(
              "C:\Program Files\Microsoft Power Apps CLI\tools\pac",
              "C:\Program Files (x86)\Microsoft Power Apps CLI\tools\pac",
              "C:\Program Files\Microsoft Power Apps CLI",
              "C:\Program Files (x86)\Microsoft Power Apps CLI"
            )
            foreach ($c in $cands) { if (Test-Path "$c\pac.exe") { Add-ToPath $c } }
            $pacCmd = (Get-Command pac.exe -ErrorAction SilentlyContinue).Path
          }

          # 3) Last-resort search
          if (-not $pacCmd) {
            $found = Get-ChildItem -Path 'C:\' -Recurse -Filter pac.exe -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) { Add-ToPath (Split-Path $found.FullName) }
            $pacCmd = (Get-Command pac.exe -ErrorAction SilentlyContinue).Path
          }

          if (-not $pacCmd) { throw "PAC not found after all strategies." }
          & $pacCmd help


      - name: Init solution (in subfolder)
        shell: pwsh
        run: |
          if (Test-Path solution) { Remove-Item -Recurse -Force solution }
          mkdir artifacts | Out-Null
          pac solution init --publisher-name VITA --publisher-prefix vp --outputDirectory solution

      - name: Add PCF reference
        working-directory: solution
        run: pac solution add-reference --path ../VITA.FilterInjector.pcfproj


        
      - name: Pack unmanaged solution
        working-directory: solution
        run: pac solution pack --zipfile ../artifacts/VITA.FilterInjector_unmanaged.zip --folder ./src --packagetype Unmanaged

      

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: VITA.FilterInjector_unmanaged
          path: artifacts/VITA.FilterInjector_unmanaged.zip
