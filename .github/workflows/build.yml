name: Build VITA Filter Injector
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dev deps
        run: npm install

      - name: Build PCF
        run: npm run build

      - name: Install PAC (MSI with winget fallback)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $log = "$env:RUNNER_TEMP\pac_install.log"
          $msi = "$env:RUNNER_TEMP\PowerAppsCLI.msi"

          try {
            Invoke-WebRequest -Uri "https://aka.ms/PowerAppsCLI" -OutFile $msi
            Start-Process msiexec.exe -Wait -ArgumentList "/i `"$msi`" /qn /norestart /l*v `"$log`""
          } catch {
            Write-Host "MSI download/start failed: $($_.Exception.Message)"
          }

          # Try to locate pac after MSI
          $pac = "C:\Program Files\Microsoft Power Apps CLI\tools\pac\pac.exe"
          if (-not (Test-Path $pac)) {
            Write-Host "PAC not found after MSI. Dumping last 200 lines of log (if exists)..."
            if (Test-Path $log) { Get-Content $log -Tail 200 | Write-Host }
            Write-Host "Falling back to wingetâ€¦"
            winget install --id Microsoft.PowerApps.CLI -e --accept-source-agreements --accept-package-agreements
            $pac = (Get-Command pac.exe -ErrorAction SilentlyContinue).Path
          }

          if (-not (Test-Path $pac)) { throw "PAC still not found after MSI and winget." }

          $dir = Split-Path $pac
          echo $dir | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          & $pac --help


      - name: Init solution
        run: |
          mkdir artifacts
          pac solution init --publisher-name VITA --publisher-prefix vp

      - name: Add PCF reference
        run: pac solution add-reference --path .
      
      - name: Pack unmanaged solution
        run: pac solution pack --zipFilePath artifacts/VITA.FilterInjector_unmanaged.zip --processUnmanaged true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: VITA.FilterInjector_managed
          path: artifacts/VITA.FilterInjector_managed.zip
